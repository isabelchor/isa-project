@page "/artistEdit/{Id:int}"
@inject NavigationManager uriHelper
@inject IJSRuntime js
@using ModelClass
@using DB
<div class="form-signin text-center w-50">
    <img class="mb-4" src="https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">
    <h1 class="h3 mb-3 font-weight-normal">Edit</h1>


    <label for="inputName" class="sr-only">Name</label>
    <input @bind-value="Name" type="text" id="inputEmail" class="form-control m-1" placeholder="Name" required autofocus>


    <label for="inputEmail" class="sr-only">Birthday</label>
    <input @bind-value="Birthday" type="text" id="inputEmail" class="form-control m-1" placeholder="Email" required autofocus>


    <div class="mt-5 mb-3 text-muted"><a href="editPassword/@id.ToString()">Edit Password</a></div>


    <button @onclick="doEdit" class="btn btn-lg btn-primary btn-block m-1" type="submit">Update</button>
</div>




@code {
    [Parameter] public int id { get; set; }
    private string Name = "";
    private string Birthday = "";
    private string Password = "";
    private artist artist;


    protected override void OnParametersSet()
    {
        if (id == null)
            id = 0;
        else
        {
            artist = new artist();
            ArtisiDB ArtisiDB = new ArtisiDB();
            artist =(artist) ArtisiDB.GetRowByPK(id);
            Name = artist.Name;
            Birthday = artist.Birthday;
        }
    }


    async Task doEdit()
    {
        ArtisiDB ArtisiDB = new ArtisiDB();
        artist = new artist();
        artist.Name = Name;
        artist.Birthday = Birthday;
        artist.artistID = id;
        int n = ArtisiDB.Update(artist);
        if (n > 0)
        {
            await js.InvokeVoidAsync("alert", $"Updated Successfully!");
            uriHelper.NavigateTo("/");
        }
        else
        {
            await js.InvokeVoidAsync("alert", $"Update failed!");
            uriHelper.NavigateTo("/");
        }
    }
}

