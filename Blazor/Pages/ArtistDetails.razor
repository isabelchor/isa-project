@page "/details/{Id:int}"
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using ModelClass
@using DB

@if (dlist != null)
{
    <table >
        <thead>
            <tr style="background-color:darkolivegreen">
                <th >Drawing Name</th>
                <th >Date Published</th>
                <th >Technique</th>
                <th >Cost</th>
                <th >Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (drawing item in dlist)
            {
                <tr>
                    <td>
                        <a class ="" href="/replicas/@item.drawingID">@item.namedrawing</a>
                    </td>
                    <td >@item.date</td>
                    <td>@item.technique</td>
                    <td>@item.cost</td>
                    <td>@tdb.GetRowByPKAsync(item.TypeID).Result.types</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => Delete(@item.drawingID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter] public int id { get; set; }
    List<drawing> dlist;
    ArtisiDB adb = new ArtisiDB();
    TypeDB tdb = new TypeDB();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var artistSession = await MySession.GetAsync<artist>("artistSession");
        if (!artistSession.Success)
        {
            navigationManager.NavigateTo("login");
        }

        DrawingDB ddb = new DrawingDB();
        dlist = (List<drawing>)(ddb.SelectAll($"SELECT * from drawing where artistID = {id}"));
        StateHasChanged();
    }

    async Task Delete(int id)
    {
        DrawingDB ddb = new DrawingDB();
        drawing d = ddb.SelectByPkAsync(id).Result;
        ReplicasDB rdb = new ReplicasDB();
        List<replicas> rlist = (List<replicas> )rdb.SelectAll($"SELECT * FROM replicas WHERE drawingID = {id}");
        if (await js.InvokeAsync<bool>("confirm"))
        {
            foreach (replicas item in rlist)
                rdb.Delete(item);
            ddb.Delete(d);
            StateHasChanged(); 
        }
    }
}
